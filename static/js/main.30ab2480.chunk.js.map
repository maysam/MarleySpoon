{"version":3,"sources":["weatherWidget.js","App.js","serviceWorker.js","index.js"],"names":["WeatherWidget","id","name","weather","main","sys","country","temp","key","title","Meta","map","description","icon","avatar","alt","src","Content","Layout","Header","url","App","state","settingsVisible","cities","country_code","coord","lat","lon","pressure","humidity","temp_min","temp_max","dt","wind","speed","deg","rain","snow","clouds","all","updateWeather","forEach","city","undefined","fetch","then","response","json","data","index","findIndex","_city","setState","catch","error","console","add","e","preventDefault","props","form","validateFields","err","values","push","resetFields","remove","filter","getFieldDecorator","this","columns","dataIndex","render","text","onClick","type","className","visible","footer","onCancel","bordered","size","pagination","defaultPageSize","hideOnSinglePage","dataSource","labelCol","span","wrapperCol","onSubmit","Item","label","rules","required","message","validator","rule","value","callback","parseInt","placeholder","offset","htmlType","Component","Form","create","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.30ab2480.chunk.js","sourcesContent":["import React from 'react'\nimport { Card } from 'antd'\n\nconst WeatherWidget = ({ id, name, weather = [], main = {}, sys = {} }) => {\n  const { country = 'loading' } = sys\n  const { temp } = main\n  return (\n    <Card key={id} title={`${name} - ${country}`}>\n      <Card.Meta title={`${temp} celsius`} />\n      {weather.map(weather => {\n        const { id, main, description, icon } = weather\n        return (\n          <Card.Meta\n            key={id}\n            title={main}\n            description={description}\n            avatar={\n              <img\n                alt={icon}\n                src={'http://openweathermap.org/img/wn/' + icon + '@2x.png'}\n              />\n            }\n          />\n        )\n      })}\n    </Card>\n  )\n}\n\nexport default WeatherWidget\n","import React, { Component } from 'react'\nimport { Table, Layout, Divider, Form, Input, Button, Modal } from 'antd'\nimport WeatherWidget from './weatherWidget'\nimport './App.css'\n\nconst { Content, Header } = Layout\n\nconst key = '19c460e76527a267ee3fd93fa6ae9ccc'\nconst url =\n  'https://api.openweathermap.org/data/2.5/weather?units=metric&APPID=' + key\n\nclass App extends Component {\n  state = {\n    settingsVisible: false,\n    cities: [\n      {\n        country_code: 'fr',\n        name: 'Montpellier',\n        id: 2992166\n      },\n      {\n        country_code: 'nl',\n        name: 'rotterdom',\n        id: 2747891\n      },\n      {\n        id: 112931,\n        name: 'Tehran'\n      },\n      {\n        id: 2643743,\n        name: 'London',\n        coord: {\n          lat: 51.5085,\n          lon: -0.1258\n        },\n        main: {\n          temp: 7,\n          pressure: 1012,\n          humidity: 81,\n          temp_min: 5,\n          temp_max: 8\n        },\n        dt: 1485791400,\n        wind: {\n          speed: 4.6,\n          deg: 90\n        },\n        sys: {\n          country: 'GB'\n        },\n        rain: null,\n        snow: null,\n        clouds: {\n          all: 90\n        },\n        weather: [\n          {\n            id: 701,\n            main: 'Mist',\n            description: 'mist',\n            icon: '50d'\n          },\n          {\n            id: 300,\n            main: 'Drizzle',\n            description: 'light intensity drizzle',\n            icon: '09d'\n          }\n        ]\n      }\n    ]\n  }\n\n  updateWeather = () => {\n    const { cities } = this.state\n    cities.forEach(city => {\n      if (city.weather === undefined) {\n        fetch(url + '&id=' + city.id)\n          .then(response => response.json())\n          .then(data => {\n            const { cities } = this.state\n            const index = cities.findIndex(_city => _city.id === city.id)\n            cities[index] = data\n            this.setState({ cities })\n          })\n          .catch(error => console.error(error))\n      }\n    })\n  }\n\n  add = e => {\n    e.preventDefault()\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        const { cities } = this.state\n        cities.push(values)\n        this.setState({ cities }, () => this.props.form.resetFields())\n      }\n    })\n  }\n\n  remove = id => {\n    const { cities } = this.state\n    this.setState({ cities: cities.filter(city => city.id !== id) })\n  }\n\n  render() {\n    const { getFieldDecorator } = this.props.form\n    const { cities, settingsVisible } = this.state\n    const columns = [\n      {\n        title: 'ID',\n        dataIndex: 'id',\n        key: 'id'\n      },\n      {\n        title: 'Name',\n        dataIndex: 'name',\n        key: 'name'\n      },\n      {\n        title: 'Action',\n        key: 'action',\n        render: (text, city) => (\n          <Button onClick={() => this.remove(city.id)} type=\"link\">\n            delete\n          </Button>\n        )\n      }\n    ]\n\n    const checkForDuplicates = (rule, value, callback) => {\n      const id = parseInt(value)\n      if (cities.findIndex(city => city.id === id) !== -1) {\n        callback(true)\n      } else {\n        callback()\n      }\n    }\n\n    this.updateWeather() // not ideal, but this is not a bad place\n\n    return (\n      <Layout className=\"App\">\n        <Header className=\"App-header\">\n          <span>Weather Widget</span>\n          <Button\n            type=\"primary\"\n            onClick={() => this.setState({ settingsVisible: true })}\n          >\n            Settings\n          </Button>\n        </Header>\n        <Content>\n          {cities.map(city => (\n            <WeatherWidget key={city.id} {...city} />\n          ))}\n        </Content>\n        <Modal\n          visible={settingsVisible}\n          title=\"Settings\"\n          footer=\"\"\n          onCancel={() => this.setState({ settingsVisible: false })}\n        >\n          <Table\n            bordered\n            size=\"small\"\n            pagination={{ defaultPageSize: 5, hideOnSinglePage: true }}\n            dataSource={cities}\n            columns={columns}\n          />\n          <Divider />\n          <Form\n            labelCol={{ span: 5 }}\n            wrapperCol={{ span: 12 }}\n            onSubmit={this.add}\n          >\n            <Form.Item label=\"ID\">\n              {getFieldDecorator('id', {\n                rules: [\n                  {\n                    required: true,\n                    message: 'Please enter openweathermap id!'\n                  },\n                  {\n                    message: 'ID is already in the list!',\n                    validator: checkForDuplicates\n                  }\n                ]\n              })(<Input placeholder='2988507' />)}\n            </Form.Item>\n            <Form.Item wrapperCol={{ span: 12, offset: 5 }}>\n              <Button type=\"primary\" htmlType=\"submit\">\n                Add city\n              </Button>\n            </Form.Item>\n          </Form>\n        </Modal>\n      </Layout>\n    )\n  }\n}\n\nexport default Form.create({ name: 'coordinated' })(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}