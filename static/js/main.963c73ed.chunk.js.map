{"version":3,"sources":["components/recipe.js","components/recipes.js","App.js","serviceWorker.js","index.js"],"names":["cover","title","chef","tags","description","column","xxl","xl","lg","md","sm","xs","Item","label","map","id","tag","color","key","source","recipes","assets","selectRecipe","loadMore","grid","gutter","dataSource","Object","keys","sort","Math","random","renderItem","recipe","photo","sys","alt","src","file","url","onClick","bodyStyle","display","Content","Layout","Header","token","App","state","loading","chefs","loadRecipes","skip","headers","Authorization","fetch","then","response","json","data","includes","Asset","forEach","fields","items","contentType","type","name","console","warn","setState","total","limit","catch","error","selectedRecipe","onLoadMore","this","style","textAlign","marginTop","height","lineHeight","className","padding","background","margin","minHeight","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.963c73ed.chunk.js","sourcesContent":["import React from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport { Descriptions, Card, Tag } from 'antd'\n\nexport default ({ cover, title, chef, tags, description }) => (\n  <Card\n    cover={cover}\n    title={\n      <div>\n        <Descriptions\n          title={title}\n          column={{ xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1 }}\n        >\n          {chef && <Descriptions.Item label=\"Chef\">{chef}</Descriptions.Item>}\n          {tags && (\n            <Descriptions.Item>\n              {tags.map(({ id, tag }) => (\n                <Tag color=\"magenta\" key={id}>\n                  {tag}\n                </Tag>\n              ))}\n            </Descriptions.Item>\n          )}\n        </Descriptions>\n      </div>\n    }\n  >\n    <ReactMarkdown source={description} />\n  </Card>\n)\n","import React from 'react'\nimport { List, Card } from 'antd'\n\nexport default ({ recipes, assets, selectRecipe, loadMore }) => (\n  <List\n    grid={{\n      gutter: 16,\n      column: 4,\n      xs: 1,\n      sm: 1,\n      md: 2,\n      lg: 2,\n      xl: 3,\n      xxl: 4\n    }}\n    loadMore={loadMore}\n    dataSource={Object.keys(recipes)\n      .sort(() => Math.random() - 0.5)\n      .map(id => {\n        return { id, ...recipes[id] }\n      })}\n    renderItem={recipe => {\n      const photo = recipe.photo && assets[recipe.photo.sys.id]\n      const cover = photo && <img alt={photo.title} src={photo.file.url} />\n\n      return (\n        <List.Item onClick={() => selectRecipe(recipe)}>\n          <Card\n            title={recipe.title}\n            cover={cover}\n            bodyStyle={{ display: 'none' }}\n          />\n        </List.Item>\n      )\n    }}\n  />\n)\n","import React, { Component } from 'react'\nimport { Breadcrumb, Empty, Layout, Button } from 'antd'\nimport Recipe from './components/recipe'\nimport Recipes from './components/recipes'\nimport './App.css'\n\nconst { Content, Header } = Layout\n\nconst space = 'kk2bw5ojx476'\nconst token = '7ac531648a1b5e1dab6c18b0979f822a5aad0fe5f1109829b8a197eb2be4b84c'\nconst url = 'https://cdn.contentful.com/spaces/' + space + '/entries'\n\nclass App extends Component {\n  state = {\n    loading: true,\n    recipes: {},\n    chefs: {},\n    tags: {},\n    assets: {}\n  }\n\n  componentDidMount() {\n    this.loadRecipes()\n  }\n\n  loadRecipes = (skip = 0) => {\n    const { chefs, tags, recipes, assets } = this.state\n    const headers = {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n    fetch(url + '?skip=' + skip, { headers })\n      .then(response => response.json())\n      .then(data => {\n        data.includes &&\n          data.includes.Asset.forEach(({ sys: { id }, fields }) => {\n            assets[id] = fields\n          })\n        data.items &&\n          data.items.forEach(({ sys: { id, contentType, type }, fields }) => {\n            switch (contentType.sys.id) {\n              case 'tag':\n                tags[id] = fields.name\n                break\n              case 'chef':\n                chefs[id] = fields.name\n                break\n              case 'recipe':\n                recipes[id] = fields\n                break\n              default:\n                console.warn(\n                  'content type ' + contentType.sys.id + ' not handled!!!'\n                )\n            }\n          })\n        this.setState({\n          chefs,\n          tags,\n          recipes,\n          assets,\n          total: data.total,\n          skip: data.skip,\n          limit: data.limit,\n          loading: false\n        })\n      })\n      .catch(error => console.error(error))\n  }\n\n  selectRecipe = selectedRecipe => {\n    this.setState({ selectedRecipe })\n  }\n\n  onLoadMore = () => {\n    const { total, skip, limit } = this.state\n    if (skip + limit < total) {\n      this.setState({ loading: true }, () => {\n        this.loadRecipes(skip + limit)\n      })\n    }\n  }\n\n  render() {\n    const {\n      total,\n      skip,\n      limit,\n      loading,\n      recipes,\n      assets,\n      chefs,\n      tags,\n      selectedRecipe\n    } = this.state\n\n    const loadMore =\n      skip + limit < total && !loading ? (\n        <div\n          style={{\n            textAlign: 'center',\n            marginTop: 12,\n            height: 32,\n            lineHeight: '32px'\n          }}\n        >\n          <Button onClick={this.onLoadMore}>loading more</Button>\n        </div>\n      ) : null\n\n    const photo = selectedRecipe && assets[selectedRecipe.photo.sys.id]\n    const cover = photo && <img alt={photo.title} src={photo.file.url} />\n\n    return (\n      <Layout className=\"App\">\n        <Header className=\"App-header header\">\n          <span>Marley Spoon</span>\n        </Header>\n        <Layout style={{ padding: '0 24px 24px' }}>\n          <Content\n            style={{\n              background: '#fff',\n              padding: 24,\n              margin: 0,\n              minHeight: 280\n            }}\n          >\n            <Breadcrumb>\n              <Breadcrumb.Item onClick={() => this.selectRecipe()}>\n                All Recipes\n              </Breadcrumb.Item>\n              {selectedRecipe && (\n                <Breadcrumb.Item>{selectedRecipe.title}</Breadcrumb.Item>\n              )}\n            </Breadcrumb>\n\n            {(selectedRecipe && (\n              <Recipe\n                cover={cover}\n                title={selectedRecipe.title}\n                tags={\n                  selectedRecipe.tags &&\n                  selectedRecipe.tags.map(({ sys: { id } }) => {\n                    return { id, tag: tags[id] }\n                  })\n                }\n                chef={selectedRecipe.chef && chefs[selectedRecipe.chef.sys.id]}\n                description={selectedRecipe.description}\n              />\n            )) ||\n              (recipes && (\n                <Recipes\n                  loadMore={loadMore}\n                  recipes={recipes}\n                  assets={assets}\n                  selectRecipe={this.selectRecipe}\n                />\n              )) || <Empty />}\n          </Content>\n        </Layout>\n      </Layout>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}